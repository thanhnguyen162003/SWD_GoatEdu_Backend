// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migration
{
    [DbContext(typeof(GoatEduContext))]
    [Migration("20240624033514_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiscussionTag", b =>
                {
                    b.Property<Guid>("DiscussionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("DiscussionsId", "TagsId");

                    b.HasIndex(new[] { "TagsId" }, "IX_DiscussionTag_TagsId");

                    b.ToTable("DiscussionTag", (string)null);
                });

            modelBuilder.Entity("FlashcardTag", b =>
                {
                    b.Property<Guid>("FlashcardsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("FlashcardsId", "TagsId");

                    b.HasIndex(new[] { "TagsId" }, "IX_FlashcardTag_TagsId");

                    b.ToTable("FlashcardTag", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AchievementContent")
                        .HasColumnType("character varying")
                        .HasColumnName("achievementContent");

                    b.Property<string>("AchievementName")
                        .HasColumnType("character varying")
                        .HasColumnName("achievementName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_Achievement_userId");

                    b.ToTable("Achievement", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AnswerBody")
                        .HasColumnType("character varying")
                        .HasColumnName("answerBody");

                    b.Property<string>("AnswerBodyHtml")
                        .HasColumnType("character varying")
                        .HasColumnName("answerBodyHtml");

                    b.Property<string>("AnswerImage")
                        .HasColumnType("character varying")
                        .HasColumnName("answerImage");

                    b.Property<string>("AnswerName")
                        .HasColumnType("character varying")
                        .HasColumnName("answerName");

                    b.Property<int?>("AnswerVote")
                        .HasColumnType("integer")
                        .HasColumnName("answerVote");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("createdBy");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("questionId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("updatedBy");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "QuestionId" }, "IX_Answer_questionId");

                    b.HasIndex(new[] { "UserId" }, "IX_Answer_userId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Calculation", b =>
                {
                    b.Property<int?>("ChapterCount")
                        .HasColumnType("integer")
                        .HasColumnName("chapterCount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("LessonCount")
                        .HasColumnType("integer")
                        .HasColumnName("lessonCount");

                    b.Property<int?>("QuizCount")
                        .HasColumnType("integer")
                        .HasColumnName("quizCount");

                    b.Property<int?>("TheoryCount")
                        .HasColumnType("integer")
                        .HasColumnName("theoryCount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.ToTable("Calculation", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int?>("ChapterLevel")
                        .HasColumnType("integer")
                        .HasColumnName("chapterLevel");

                    b.Property<string>("ChapterName")
                        .HasColumnType("character varying")
                        .HasColumnName("chapterName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("createdBy");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subjectId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubjectId" }, "IX_Chapter_subjectId");

                    b.HasIndex(new[] { "SubjectId", "IsDeleted" }, "idx_chapter_subjectid_isdeleted");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Discussion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("createdBy");

                    b.Property<string>("DiscussionBody")
                        .HasColumnType("character varying")
                        .HasColumnName("discussionBody");

                    b.Property<string>("DiscussionBodyHtml")
                        .HasColumnType("character varying")
                        .HasColumnName("discussionBodyHtml");

                    b.Property<string>("DiscussionImage")
                        .HasColumnType("character varying")
                        .HasColumnName("discussionImage");

                    b.Property<string>("DiscussionName")
                        .HasColumnType("character varying")
                        .HasColumnName("discussionName");

                    b.Property<int?>("DiscussionVote")
                        .HasColumnType("integer")
                        .HasColumnName("discussionVote");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsSolved")
                        .HasColumnType("boolean")
                        .HasColumnName("isSolved");

                    b.Property<string>("Status")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subjectId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("updatedBy");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubjectId" }, "IX_Discussion_subjectId");

                    b.HasIndex(new[] { "UserId" }, "IX_Discussion_userId");

                    b.ToTable("Discussion", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subjectId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "SubjectId" }, "Enrollment_userId_subjectId_key")
                        .IsUnique();

                    b.HasIndex(new[] { "SubjectId" }, "IX_Enrollment_subjectId");

                    b.ToTable("Enrollment", (string)null);
                });

            modelBuilder.Entity("Infrastructure.EnrollmentProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uuid")
                        .HasColumnName("chapterId");

                    b.Property<Guid?>("EnrollmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("enrollmentId");

                    b.Property<int?>("Process")
                        .HasColumnType("integer")
                        .HasColumnName("process");

                    b.Property<string>("Status")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EnrollmentId" }, "EnrollmentProcess_enrollmentId_key")
                        .IsUnique();

                    b.ToTable("EnrollmentProcess", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Flashcard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("createdBy");

                    b.Property<string>("FlashcardDescription")
                        .HasColumnType("character varying")
                        .HasColumnName("flashcardDescription");

                    b.Property<string>("FlashcardName")
                        .HasColumnType("character varying")
                        .HasColumnName("flashcardName");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<int?>("Star")
                        .HasColumnType("integer")
                        .HasColumnName("star");

                    b.Property<string>("Status")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subjectId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("updatedBy");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubjectId" }, "IX_Flashcard_subjectId");

                    b.HasIndex(new[] { "UserId" }, "IX_Flashcard_userId");

                    b.ToTable("Flashcard", (string)null);
                });

            modelBuilder.Entity("Infrastructure.FlashcardContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("createdBy");

                    b.Property<string>("FlashcardContentAnswer")
                        .HasColumnType("character varying")
                        .HasColumnName("flashcardContentAnswer");

                    b.Property<string>("FlashcardContentQuestion")
                        .HasColumnType("character varying")
                        .HasColumnName("flashcardContentQuestion");

                    b.Property<Guid?>("FlashcardId")
                        .HasColumnType("uuid")
                        .HasColumnName("flashcardId");

                    b.Property<string>("Image")
                        .HasColumnType("character varying")
                        .HasColumnName("image");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Status")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FlashcardId" }, "IX_FlashcardContent_flashcardId");

                    b.ToTable("FlashcardContent", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uuid")
                        .HasColumnName("chapterId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("createdBy");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("displayOrder");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LessonBody")
                        .HasColumnType("character varying")
                        .HasColumnName("lessonBody");

                    b.Property<string>("LessonMaterial")
                        .HasColumnType("character varying")
                        .HasColumnName("lessonMaterial");

                    b.Property<string>("LessonName")
                        .HasColumnType("character varying")
                        .HasColumnName("lessonName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ChapterId" }, "IX_Lesson_chapterId");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("createdBy");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("NoteBody")
                        .HasColumnType("character varying")
                        .HasColumnName("noteBody");

                    b.Property<string>("NoteBodyHtml")
                        .HasColumnType("character varying")
                        .HasColumnName("noteBodyHtml");

                    b.Property<string>("NoteName")
                        .HasColumnType("character varying")
                        .HasColumnName("noteName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("updatedBy");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_Note_userId");

                    b.ToTable("Note", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("NotificationMessage")
                        .HasColumnType("character varying")
                        .HasColumnName("notificationMessage");

                    b.Property<string>("NotificationName")
                        .HasColumnType("character varying")
                        .HasColumnName("notificationName");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("readAt");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_Notification_userId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Infrastructure.QuestionInQuiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("QuizAnswer1")
                        .HasColumnType("character varying")
                        .HasColumnName("quizAnswer1");

                    b.Property<string>("QuizAnswer2")
                        .HasColumnType("character varying")
                        .HasColumnName("quizAnswer2");

                    b.Property<string>("QuizAnswer3")
                        .HasColumnType("character varying")
                        .HasColumnName("quizAnswer3");

                    b.Property<string>("QuizCorrect")
                        .HasColumnType("character varying")
                        .HasColumnName("quizCorrect");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quizId");

                    b.Property<string>("QuizQuestion")
                        .HasColumnType("character varying")
                        .HasColumnName("quizQuestion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "QuizId" }, "IX_QuestionInQuiz_quizId");

                    b.ToTable("QuestionInQuiz", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uuid")
                        .HasColumnName("chapterId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsRequire")
                        .HasColumnType("boolean")
                        .HasColumnName("isRequire");

                    b.Property<Guid?>("LessonId")
                        .HasColumnType("uuid")
                        .HasColumnName("lessonId");

                    b.Property<string>("Quiz1")
                        .HasColumnType("character varying")
                        .HasColumnName("quiz");

                    b.Property<int?>("QuizLevel")
                        .HasColumnType("integer")
                        .HasColumnName("quizLevel");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subjectId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ChapterId" }, "IX_Quiz_chapterId");

                    b.HasIndex(new[] { "LessonId" }, "IX_Quiz_lessonId");

                    b.HasIndex(new[] { "SubjectId" }, "IX_Quiz_subjectId");

                    b.ToTable("Quiz", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<Guid?>("FlashcardId")
                        .HasColumnType("uuid")
                        .HasColumnName("flashcardId");

                    b.Property<short?>("RateValue")
                        .HasColumnType("smallint")
                        .HasColumnName("rateValue");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FlashcardId" }, "IX_Rate_flashcardId");

                    b.HasIndex(new[] { "UserId" }, "IX_Rate_userId");

                    b.ToTable("Rate", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("createdBy");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("ReportContent")
                        .HasColumnType("character varying")
                        .HasColumnName("reportContent");

                    b.Property<string>("ReportTitle")
                        .HasColumnType("character varying")
                        .HasColumnName("reportTitle");

                    b.Property<string>("Status")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_Report_userId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("RoleName")
                        .HasColumnType("character varying")
                        .HasColumnName("roleName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Class")
                        .HasColumnType("character varying")
                        .HasColumnName("class");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("Image")
                        .HasColumnType("character varying")
                        .HasColumnName("image");

                    b.Property<string>("Information")
                        .HasColumnType("character varying")
                        .HasColumnName("information");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("character varying")
                        .HasColumnName("subjectCode");

                    b.Property<string>("SubjectName")
                        .HasColumnType("character varying")
                        .HasColumnName("subjectName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IsDeleted" }, "idx_subject_isdeleted");

                    b.HasIndex(new[] { "CreatedAt", "SubjectName", "Id" }, "idx_subject_ordering");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("SubscriptionBody")
                        .HasColumnType("character varying")
                        .HasColumnName("subscriptionBody");

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("character varying")
                        .HasColumnName("subscriptionName");

                    b.HasKey("Id");

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("TagName")
                        .HasColumnType("character varying")
                        .HasColumnName("tagName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Theory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("File")
                        .HasColumnType("character varying")
                        .HasColumnName("file");

                    b.Property<string>("Image")
                        .HasColumnType("character varying")
                        .HasColumnName("image");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LessonId")
                        .HasColumnType("uuid")
                        .HasColumnName("lessonId");

                    b.Property<string>("TheoryContent")
                        .HasColumnType("character varying")
                        .HasColumnName("theoryContent");

                    b.Property<string>("TheoryName")
                        .HasColumnType("character varying")
                        .HasColumnName("theoryName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LessonId" }, "IX_Theory_lessonId");

                    b.ToTable("Theory", (string)null);
                });

            modelBuilder.Entity("Infrastructure.TheoryFlashCardContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Answer")
                        .HasColumnType("character varying")
                        .HasColumnName("answer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Question")
                        .HasColumnType("character varying")
                        .HasColumnName("question");

                    b.Property<string>("Status")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<Guid?>("TheoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("theoryId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TheoryId" }, "IX_TheoryFlashCardContent_theoryId");

                    b.ToTable("TheoryFlashCardContent", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("endDate");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Note")
                        .HasColumnType("character varying")
                        .HasColumnName("note");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startDate");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscriptionId");

                    b.Property<string>("TransactionName")
                        .HasColumnType("character varying")
                        .HasColumnName("transactionName");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("walletId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubscriptionId" }, "IX_Transaction_subscriptionId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Infrastructure.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<bool?>("EmailVerify")
                        .HasColumnType("boolean")
                        .HasColumnName("emailVerify");

                    b.Property<string>("Fullname")
                        .HasColumnType("character varying")
                        .HasColumnName("fullname");

                    b.Property<string>("Image")
                        .HasColumnType("character varying")
                        .HasColumnName("image");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsNewUser")
                        .HasColumnType("boolean")
                        .HasColumnName("isNewUser");

                    b.Property<string>("Password")
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("Provider")
                        .HasColumnType("character varying")
                        .HasColumnName("provider");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("roleId");

                    b.Property<string>("Subscription")
                        .HasColumnType("character varying")
                        .HasColumnName("subscription");

                    b.Property<DateTime?>("SubscriptionEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("subscriptionEnd");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.Property<string>("Username")
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("walletId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_User_roleId");

                    b.HasIndex(new[] { "WalletId" }, "IX_User_walletId")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AnswerId")
                        .HasColumnType("uuid")
                        .HasColumnName("answerId");

                    b.Property<Guid?>("DiscussionId")
                        .HasColumnType("uuid")
                        .HasColumnName("discussionId");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.Property<DateTime?>("VoteTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voteTimeStamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<short?>("VoteValue")
                        .HasColumnType("smallint")
                        .HasColumnName("voteValue");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AnswerId" }, "IX_Votes_answerId");

                    b.HasIndex(new[] { "DiscussionId" }, "IX_Votes_discussionId");

                    b.HasIndex(new[] { "UserId" }, "IX_Votes_userId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Infrastructure.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<double?>("NumberWallet")
                        .HasColumnType("double precision")
                        .HasColumnName("numberWallet");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("DiscussionTag", b =>
                {
                    b.HasOne("Infrastructure.Discussion", null)
                        .WithMany()
                        .HasForeignKey("DiscussionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlashcardTag", b =>
                {
                    b.HasOne("Infrastructure.Flashcard", null)
                        .WithMany()
                        .HasForeignKey("FlashcardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Achievement", b =>
                {
                    b.HasOne("Infrastructure.User", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Answer", b =>
                {
                    b.HasOne("Infrastructure.Discussion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.HasOne("Infrastructure.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Chapter", b =>
                {
                    b.HasOne("Infrastructure.Subject", "Subject")
                        .WithMany("Chapters")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Infrastructure.Discussion", b =>
                {
                    b.HasOne("Infrastructure.Subject", "Subject")
                        .WithMany("Discussions")
                        .HasForeignKey("SubjectId");

                    b.HasOne("Infrastructure.User", "User")
                        .WithMany("Discussions")
                        .HasForeignKey("UserId");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Enrollment", b =>
                {
                    b.HasOne("Infrastructure.Subject", "Subject")
                        .WithMany("Enrollments")
                        .HasForeignKey("SubjectId");

                    b.HasOne("Infrastructure.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.EnrollmentProcess", b =>
                {
                    b.HasOne("Infrastructure.Enrollment", "Enrollment")
                        .WithOne("EnrollmentProcess")
                        .HasForeignKey("Infrastructure.EnrollmentProcess", "EnrollmentId");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("Infrastructure.Flashcard", b =>
                {
                    b.HasOne("Infrastructure.Subject", "Subject")
                        .WithMany("Flashcards")
                        .HasForeignKey("SubjectId");

                    b.HasOne("Infrastructure.User", "User")
                        .WithMany("Flashcards")
                        .HasForeignKey("UserId");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.FlashcardContent", b =>
                {
                    b.HasOne("Infrastructure.Flashcard", "Flashcard")
                        .WithMany("FlashcardContents")
                        .HasForeignKey("FlashcardId");

                    b.Navigation("Flashcard");
                });

            modelBuilder.Entity("Infrastructure.Lesson", b =>
                {
                    b.HasOne("Infrastructure.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Infrastructure.Note", b =>
                {
                    b.HasOne("Infrastructure.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Notification", b =>
                {
                    b.HasOne("Infrastructure.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.QuestionInQuiz", b =>
                {
                    b.HasOne("Infrastructure.Quiz", "Quiz")
                        .WithMany("QuestionInQuizzes")
                        .HasForeignKey("QuizId");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Infrastructure.Quiz", b =>
                {
                    b.HasOne("Infrastructure.Chapter", "Chapter")
                        .WithMany("Quizzes")
                        .HasForeignKey("ChapterId");

                    b.HasOne("Infrastructure.Lesson", "Lesson")
                        .WithMany("Quizzes")
                        .HasForeignKey("LessonId");

                    b.HasOne("Infrastructure.Subject", "Subject")
                        .WithMany("Quizzes")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Chapter");

                    b.Navigation("Lesson");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Infrastructure.Rate", b =>
                {
                    b.HasOne("Infrastructure.Flashcard", "Flashcard")
                        .WithMany("Rates")
                        .HasForeignKey("FlashcardId");

                    b.HasOne("Infrastructure.User", "User")
                        .WithMany("Rates")
                        .HasForeignKey("UserId");

                    b.Navigation("Flashcard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Report", b =>
                {
                    b.HasOne("Infrastructure.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Theory", b =>
                {
                    b.HasOne("Infrastructure.Lesson", "Lesson")
                        .WithMany("Theories")
                        .HasForeignKey("LessonId");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Infrastructure.TheoryFlashCardContent", b =>
                {
                    b.HasOne("Infrastructure.Theory", "Theory")
                        .WithMany("TheoryFlashCardContents")
                        .HasForeignKey("TheoryId");

                    b.Navigation("Theory");
                });

            modelBuilder.Entity("Infrastructure.Transaction", b =>
                {
                    b.HasOne("Infrastructure.Subscription", "Subscription")
                        .WithMany("Transactions")
                        .HasForeignKey("SubscriptionId");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Infrastructure.User", b =>
                {
                    b.HasOne("Infrastructure.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.HasOne("Infrastructure.Wallet", "Wallet")
                        .WithOne("User")
                        .HasForeignKey("Infrastructure.User", "WalletId");

                    b.Navigation("Role");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Infrastructure.Vote", b =>
                {
                    b.HasOne("Infrastructure.Answer", "Answer")
                        .WithMany("Votes")
                        .HasForeignKey("AnswerId");

                    b.HasOne("Infrastructure.Discussion", "Discussion")
                        .WithMany("Votes")
                        .HasForeignKey("DiscussionId");

                    b.HasOne("Infrastructure.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId");

                    b.Navigation("Answer");

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Answer", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Infrastructure.Chapter", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Infrastructure.Discussion", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Infrastructure.Enrollment", b =>
                {
                    b.Navigation("EnrollmentProcess");
                });

            modelBuilder.Entity("Infrastructure.Flashcard", b =>
                {
                    b.Navigation("FlashcardContents");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Infrastructure.Lesson", b =>
                {
                    b.Navigation("Quizzes");

                    b.Navigation("Theories");
                });

            modelBuilder.Entity("Infrastructure.Quiz", b =>
                {
                    b.Navigation("QuestionInQuizzes");
                });

            modelBuilder.Entity("Infrastructure.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Infrastructure.Subject", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Discussions");

                    b.Navigation("Enrollments");

                    b.Navigation("Flashcards");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Infrastructure.Subscription", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Infrastructure.Theory", b =>
                {
                    b.Navigation("TheoryFlashCardContents");
                });

            modelBuilder.Entity("Infrastructure.User", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Answers");

                    b.Navigation("Discussions");

                    b.Navigation("Enrollments");

                    b.Navigation("Flashcards");

                    b.Navigation("Notes");

                    b.Navigation("Notifications");

                    b.Navigation("Rates");

                    b.Navigation("Reports");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Infrastructure.Wallet", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
