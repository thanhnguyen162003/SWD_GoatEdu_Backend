Index: GoatEdu.Core/Models/Notification.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.ComponentModel.DataAnnotations.Schema;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace Infrastructure\r\n{\r\n    [Table(\"Notification\")]\r\n    public partial class Notification \r\n    {\r\n        [Key]\r\n        [Column(\"id\")]\r\n        public Guid Id { get; set; }\r\n        [Column(\"notificationName\", TypeName = \"character varying\")]\r\n        public string? NotificationName { get; set; }\r\n        [Column(\"notificationMessage\", TypeName = \"character varying\")]\r\n        public string? NotificationMessage { get; set; }\r\n        [Column(\"userId\")]\r\n        public Guid? UserId { get; set; }\r\n        [Column(\"readAt\", TypeName = \"timestamp without time zone\")]\r\n        public DateTime? ReadAt { get; set; }\r\n\r\n        [ForeignKey(\"UserId\")]\r\n        [InverseProperty(\"Notifications\")]\r\n        public virtual User? User { get; set; }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Models/Notification.cs b/GoatEdu.Core/Models/Notification.cs
--- a/GoatEdu.Core/Models/Notification.cs	(revision 57dfe6a4a4e7ffa322b28385b4f5e5ab33e0449f)
+++ b/GoatEdu.Core/Models/Notification.cs	(date 1716069061794)
@@ -7,7 +7,7 @@
 namespace Infrastructure
 {
     [Table("Notification")]
-    public partial class Notification 
+    public partial class Notification : BaseEntity
     {
         [Key]
         [Column("id")]
Index: GoatEdu.API/WeatherForecast.cs
===================================================================
diff --git a/GoatEdu.API/WeatherForecast.cs b/GoatEdu.API/WeatherForecast.cs
deleted file mode 100644
--- a/GoatEdu.API/WeatherForecast.cs	(revision 57dfe6a4a4e7ffa322b28385b4f5e5ab33e0449f)
+++ /dev/null	(revision 57dfe6a4a4e7ffa322b28385b4f5e5ab33e0449f)
@@ -1,12 +0,0 @@
-namespace GoatEdu.API;
-
-public class WeatherForecast
-{
-    public DateTime Date { get; set; }
-
-    public int TemperatureC { get; set; }
-
-    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
-
-    public string? Summary { get; set; }
-}
\ No newline at end of file
Index: GoatEdu.Core/Interfaces/IUnitOfWork.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using GoatEdu.Core.Interfaces.RoleInterfaces;\r\nusing GoatEdu.Core.Interfaces.UserInterfaces;\r\n\r\nnamespace GoatEdu.Core.Interfaces\r\n{\r\n\r\n    public interface IUnitOfWork\r\n    {\r\n        \r\n        IUserRepository UserRepository { get; }\r\n        IRoleRepository RoleRepository { get; }\r\n        \r\n        void SaveChanges();\r\n        Task SaveChangesAsync();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Interfaces/IUnitOfWork.cs b/GoatEdu.Core/Interfaces/IUnitOfWork.cs
--- a/GoatEdu.Core/Interfaces/IUnitOfWork.cs	(revision 57dfe6a4a4e7ffa322b28385b4f5e5ab33e0449f)
+++ b/GoatEdu.Core/Interfaces/IUnitOfWork.cs	(date 1716075359355)
@@ -1,3 +1,4 @@
+using GoatEdu.Core.Interfaces.NotificationInterfaces;
 using GoatEdu.Core.Interfaces.RoleInterfaces;
 using GoatEdu.Core.Interfaces.UserInterfaces;
 
@@ -9,8 +10,9 @@
         
         IUserRepository UserRepository { get; }
         IRoleRepository RoleRepository { get; }
+        INotificationRepository NotificationRepository { get; }
         
         void SaveChanges();
-        Task SaveChangesAsync();
+        Task<int> SaveChangesAsync();
     }
 }
\ No newline at end of file
Index: GoatEdu.Core/Interfaces/NotificationInterfaces/INotificationRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Interfaces/NotificationInterfaces/INotificationRepository.cs b/GoatEdu.Core/Interfaces/NotificationInterfaces/INotificationRepository.cs
new file mode 100644
--- /dev/null	(date 1716074587598)
+++ b/GoatEdu.Core/Interfaces/NotificationInterfaces/INotificationRepository.cs	(date 1716074587598)
@@ -0,0 +1,11 @@
+using GoatEdu.Core.Interfaces.GenericInterfaces;
+using Infrastructure;
+
+namespace GoatEdu.Core.Interfaces.NotificationInterfaces;
+
+public interface INotificationRepository : IRepository<Notification>
+{
+    Task<List<Notification>> GetNotificationByUserId(Guid id);
+    Task<List<Notification>> GetNotificationByIds(List<Guid> ids);
+    
+}
\ No newline at end of file
Index: GoatEdu.Core/Interfaces/NotificationInterfaces/INotificationService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Interfaces/NotificationInterfaces/INotificationService.cs b/GoatEdu.Core/Interfaces/NotificationInterfaces/INotificationService.cs
new file mode 100644
--- /dev/null	(date 1716075591161)
+++ b/GoatEdu.Core/Interfaces/NotificationInterfaces/INotificationService.cs	(date 1716075591161)
@@ -0,0 +1,13 @@
+using GoatEdu.Core.DTOs;
+using GoatEdu.Core.DTOs.NotificationDto;
+using Infrastructure;
+
+namespace GoatEdu.Core.Interfaces.NotificationInterfaces;
+
+public interface INotificationService
+{
+    Task<ResponseDto> GetNotificationById(Guid id);
+    Task<ResponseDto> GetNotificationByUserId(Guid id);
+    Task<ResponseDto> InsertNotification(NotificationRequestDto notification);
+    Task<ResponseDto> DeleteNotification(List<Guid> ids);
+}
\ No newline at end of file
Index: GoatEdu.Core/Mappings/MapperConfigProfile.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Mappings/MapperConfigProfile.cs b/GoatEdu.Core/Mappings/MapperConfigProfile.cs
new file mode 100644
--- /dev/null	(date 1716071517400)
+++ b/GoatEdu.Core/Mappings/MapperConfigProfile.cs	(date 1716071517400)
@@ -0,0 +1,13 @@
+using AutoMapper;
+using GoatEdu.Core.DTOs.NotificationDto;
+using Infrastructure;
+
+namespace GoatEdu.Core.Mappings;
+
+public class MapperConfigProfile : Profile
+{
+    public MapperConfigProfile()
+    {
+        CreateMap<Notification, NotificationResponseDto>().ReverseMap();
+    }
+}
\ No newline at end of file
Index: GoatEdu.Core/Services/NotificationService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Services/NotificationService.cs b/GoatEdu.Core/Services/NotificationService.cs
new file mode 100644
--- /dev/null	(date 1716075620946)
+++ b/GoatEdu.Core/Services/NotificationService.cs	(date 1716075620946)
@@ -0,0 +1,70 @@
+using System.Net;
+using AutoMapper;
+using GoatEdu.Core.DTOs;
+using GoatEdu.Core.DTOs.NotificationDto;
+using GoatEdu.Core.Interfaces;
+using GoatEdu.Core.Interfaces.GenericInterfaces;
+using GoatEdu.Core.Interfaces.NotificationInterfaces;
+using Infrastructure;
+
+namespace GoatEdu.Core.Services;
+
+public class NotificationService : INotificationService
+{
+    private readonly IUnitOfWork _unitOfWork;
+    private readonly ICurrentTime _currentTime;
+    private readonly IMapper _mapper;
+
+    public NotificationService(IUnitOfWork unitOfWork, CurrentTime currentTime, IMapper mapper)
+    {
+        _unitOfWork = unitOfWork;
+        _currentTime = currentTime;
+        _mapper = mapper;
+    }
+    
+    public async Task<ResponseDto> GetNotificationById(Guid id)
+    {
+        var notiFound = await _unitOfWork.NotificationRepository.GetByIdAsync(id);
+        if (notiFound != null)
+        {
+            notiFound.ReadAt = _currentTime.GetCurrentTime();
+            await _unitOfWork.SaveChangesAsync();
+            var notiMapper = _mapper.Map<NotificationResponseDto>(notiFound);
+            return new ResponseDto(HttpStatusCode.OK, "", notiMapper);
+        }
+        return new ResponseDto(HttpStatusCode.OK, "Kiếm không ra :))");
+    }
+
+    public async Task<ResponseDto> GetNotificationByUserId(Guid id)
+    {
+        
+    }
+
+    public async Task<ResponseDto> InsertNotification(NotificationRequestDto notification)
+    {
+        var noti = _mapper.Map<Notification>(notification);
+        await _unitOfWork.NotificationRepository.AddAsync(noti);
+        var result = await _unitOfWork.SaveChangesAsync();
+        if (result > 0)
+        {
+            return new ResponseDto(HttpStatusCode.OK, "Add Successfully !");
+        }
+        return new ResponseDto(HttpStatusCode.OK, "Add Failed !");
+    }
+
+    public async Task<ResponseDto> DeleteNotification(List<Guid> ids)
+    {
+        var notiFound = await _unitOfWork.NotificationRepository.GetNotificationByIds(ids);
+        foreach (var data in notiFound)
+        {
+            data.IsDeleted = false;
+        }
+        _unitOfWork.NotificationRepository.UpdateRange(notiFound);
+        var result = await _unitOfWork.SaveChangesAsync();
+        if (result > 0)
+        {
+            return new ResponseDto(HttpStatusCode.OK, "Delete Successfully !");
+        }
+        return new ResponseDto(HttpStatusCode.OK, "Delete Failed !");
+    }
+}
\ No newline at end of file
Index: GoatEdu.Core/Interfaces/ClaimInterfaces/IClaimsService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Interfaces/ClaimInterfaces/IClaimsService.cs b/GoatEdu.Core/Interfaces/ClaimInterfaces/IClaimsService.cs
new file mode 100644
--- /dev/null	(date 1716068262437)
+++ b/GoatEdu.Core/Interfaces/ClaimInterfaces/IClaimsService.cs	(date 1716068262437)
@@ -0,0 +1,6 @@
+namespace GoatEdu.Core.Interfaces.ClaimInterfaces;
+
+public interface IClaimsService
+{
+    public int GetCurrentUserId {  get; }
+}
\ No newline at end of file
Index: GoatEdu.Core/Services/ClaimService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Services/ClaimService.cs b/GoatEdu.Core/Services/ClaimService.cs
new file mode 100644
--- /dev/null	(date 1716068262445)
+++ b/GoatEdu.Core/Services/ClaimService.cs	(date 1716068262445)
@@ -0,0 +1,18 @@
+using System.Security.Claims;
+using GoatEdu.Core.Interfaces.ClaimInterfaces;
+using GoatEdu.Core.Interfaces.Security;
+using Microsoft.AspNetCore.Http;
+
+namespace GoatEdu.Core.Services;
+
+public class ClaimsService : IClaimsService
+{
+    public ClaimsService(IHttpContextAccessor httpContextAccessor)
+    {
+        // todo implementation to get the current userId
+        var identity = httpContextAccessor.HttpContext?.User?.Identity as ClaimsIdentity;
+        var extractedId = AuthenTools.GetCurrentAccountId(identity);
+        GetCurrentUserId = string.IsNullOrEmpty(extractedId) ? 0 : int.Parse(extractedId);
+    }
+    public int GetCurrentUserId { get; }
+}
\ No newline at end of file
Index: GoatEdu.Core/DTOs/NotificationDto/NotificationResponseDto.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/DTOs/NotificationDto/NotificationResponseDto.cs b/GoatEdu.Core/DTOs/NotificationDto/NotificationResponseDto.cs
new file mode 100644
--- /dev/null	(date 1716071569007)
+++ b/GoatEdu.Core/DTOs/NotificationDto/NotificationResponseDto.cs	(date 1716071569007)
@@ -0,0 +1,10 @@
+namespace GoatEdu.Core.DTOs.NotificationDto;
+
+public class NotificationResponseDto
+{
+    public Guid Id { get; set; }
+    public string? NotificationName { get; set; }
+    public string? NotificationMessage { get; set; }
+    public Guid? UserId { get; set; }
+    public DateTime? ReadAt { get; set; }
+}
\ No newline at end of file
Index: GoatEdu.Core/Security/AuthenTools.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Security/AuthenTools.cs b/GoatEdu.Core/Security/AuthenTools.cs
new file mode 100644
--- /dev/null	(date 1716068262458)
+++ b/GoatEdu.Core/Security/AuthenTools.cs	(date 1716068262458)
@@ -0,0 +1,16 @@
+using System.Security.Claims;
+
+namespace GoatEdu.Core.Interfaces.Security;
+
+public class AuthenTools
+{
+    public static string GetCurrentAccountId(ClaimsIdentity identity)
+    {
+        if (identity != null)
+        {
+            var userClaims = identity.Claims;
+            return userClaims.FirstOrDefault(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")?.Value;
+        }
+        return null;
+    }
+}
\ No newline at end of file
Index: GoatEdu.Core/Interfaces/GenericInterfaces/ICurrentTime.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Interfaces/GenericInterfaces/ICurrentTime.cs b/GoatEdu.Core/Interfaces/GenericInterfaces/ICurrentTime.cs
new file mode 100644
--- /dev/null	(date 1716068262465)
+++ b/GoatEdu.Core/Interfaces/GenericInterfaces/ICurrentTime.cs	(date 1716068262465)
@@ -0,0 +1,6 @@
+namespace GoatEdu.Core.Interfaces.GenericInterfaces;
+
+public interface ICurrentTime
+{
+    public DateTime GetCurrentTime();
+}
\ No newline at end of file
Index: GoatEdu.Core/Interfaces/GenericInterfaces/IRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Infrastructure;\r\n\r\nnamespace GoatEdu.Core.Interfaces.GenericInterfaces;\r\n\r\npublic interface IRepository<T> where T : BaseEntity\r\n{\r\n    IEnumerable<T> GetAll();\r\n    T GetById(Guid? id);\r\n    void Add(T entity);\r\n    void Update(T entity);\r\n    \r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Interfaces/GenericInterfaces/IRepository.cs b/GoatEdu.Core/Interfaces/GenericInterfaces/IRepository.cs
--- a/GoatEdu.Core/Interfaces/GenericInterfaces/IRepository.cs	(revision 57dfe6a4a4e7ffa322b28385b4f5e5ab33e0449f)
+++ b/GoatEdu.Core/Interfaces/GenericInterfaces/IRepository.cs	(date 1716075181454)
@@ -5,8 +5,10 @@
 public interface IRepository<T> where T : BaseEntity
 {
     IEnumerable<T> GetAll();
-    T GetById(Guid? id);
-    void Add(T entity);
+    Task<T?> GetByIdAsync(Guid? id);
+    Task AddAsync(T entity);
     void Update(T entity);
-    
+
+    void UpdateRange(List<T> entities);
+
 }
Index: GoatEdu.Core/Services/CurrentTime.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/Services/CurrentTime.cs b/GoatEdu.Core/Services/CurrentTime.cs
new file mode 100644
--- /dev/null	(date 1716068262481)
+++ b/GoatEdu.Core/Services/CurrentTime.cs	(date 1716068262481)
@@ -0,0 +1,11 @@
+using GoatEdu.Core.Interfaces.GenericInterfaces;
+
+namespace GoatEdu.Core.Services;
+
+public class CurrentTime : ICurrentTime
+{
+    public DateTime GetCurrentTime()
+    {
+        return DateTime.UtcNow.AddHours(7);
+    }
+}
\ No newline at end of file
Index: GoatEdu.API/DI.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.API/DI.cs b/GoatEdu.API/DI.cs
new file mode 100644
--- /dev/null	(date 1716074242315)
+++ b/GoatEdu.API/DI.cs	(date 1716074242315)
@@ -0,0 +1,38 @@
+using GoatEdu.Core.Interfaces;
+using GoatEdu.Core.Interfaces.GenericInterfaces;
+using GoatEdu.Core.Interfaces.NotificationInterfaces;
+using GoatEdu.Core.Interfaces.RoleInterfaces;
+using GoatEdu.Core.Interfaces.Security;
+using GoatEdu.Core.Interfaces.UserInterfaces;
+using GoatEdu.Core.Mappings;
+using GoatEdu.Core.Services;
+using Infrastructure.Mappings;
+using Infrastructure.Repositories;
+
+namespace GoatEdu.API;
+
+public static class DI
+{
+    public static IServiceCollection AddWebAPIService(this IServiceCollection services)
+    {
+        // Repositories
+        services.AddScoped(typeof(IRepository<>), typeof(BaseRepository<>));
+        services.AddScoped<IUserRepository, UserRepository>();
+        services.AddScoped<IRoleRepository, RoleRepository>();
+        services.AddScoped<INotificationRepository, NotificationRepository>();
+        
+        
+        // Services
+        services.AddScoped<IUserService, UserService>();
+        services.AddScoped<IRoleService, RoleService>();
+        
+        
+        // Others
+        services.AddAutoMapper(typeof(AutoMapperProfile).Assembly);
+        services.AddAutoMapper(typeof(MapperConfigProfile).Assembly);
+        services.AddScoped<IUnitOfWork, UnitOfWork>();
+        services.AddScoped<JWTGenerator, JWTConfig>();
+        services.AddScoped<ICurrentTime, CurrentTime>();
+        return services;
+    }
+}
\ No newline at end of file
Index: GoatEdu.Core/DTOs/NotificationDto/NotificationRequestDto.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/DTOs/NotificationDto/NotificationRequestDto.cs b/GoatEdu.Core/DTOs/NotificationDto/NotificationRequestDto.cs
new file mode 100644
--- /dev/null	(date 1716073097937)
+++ b/GoatEdu.Core/DTOs/NotificationDto/NotificationRequestDto.cs	(date 1716073097937)
@@ -0,0 +1,8 @@
+namespace GoatEdu.Core.DTOs.NotificationDto;
+
+public class NotificationRequestDto
+{
+    public string? NotificationName { get; set; }
+    public string? NotificationMessage { get; set; }
+    public Guid? UserId { get; set; }
+}
\ No newline at end of file
Index: GoatEdu.Infrastructure/Repositories/NotificationRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Infrastructure/Repositories/NotificationRepository.cs b/GoatEdu.Infrastructure/Repositories/NotificationRepository.cs
new file mode 100644
--- /dev/null	(date 1716074932514)
+++ b/GoatEdu.Infrastructure/Repositories/NotificationRepository.cs	(date 1716074932514)
@@ -0,0 +1,26 @@
+using GoatEdu.Core.Interfaces.NotificationInterfaces;
+using Infrastructure.Data;
+using Microsoft.EntityFrameworkCore;
+
+namespace Infrastructure.Repositories;
+
+public class NotificationRepository : BaseRepository<Notification>, INotificationRepository
+{
+    private readonly GoatEduContext _context;
+    
+    public NotificationRepository(GoatEduContext context) : base(context)
+    {
+        _context = context;
+    }
+
+
+    public async Task<List<Notification>> GetNotificationByUserId(Guid id)
+    {
+        return await _context.Notifications.Where(x => x.UserId == id).ToListAsync();
+    }
+
+    public async Task<List<Notification>> GetNotificationByIds(List<Guid> ids)
+    {
+        return await _context.Notifications.Where(x => ids.Any(id => id == x.Id)).ToListAsync();
+    }
+}
\ No newline at end of file
Index: GoatEdu.API/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Text;\r\nusing GoatEdu.Core.Interfaces;\r\nusing GoatEdu.Core.Interfaces.GenericInterfaces;\r\nusing GoatEdu.Core.Interfaces.RoleInterfaces;\r\nusing GoatEdu.Core.Interfaces.Security;\r\nusing GoatEdu.Core.Interfaces.UserInterfaces;\r\nusing GoatEdu.Core.Services;\r\nusing Infrastructure.Data;\r\nusing Infrastructure.Repositories;\r\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.IdentityModel.Tokens;\r\nusing Microsoft.OpenApi.Models;\r\n\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nConfigurationManager configuration = builder.Configuration;\r\n\r\nbuilder.Services.AddDbContext<GoatEduContext>(options =>\r\n    options.UseNpgsql(builder.Configuration.GetConnectionString(\"DefaultConnection\")));\r\nbuilder.Services.AddCors();\r\nbuilder.Services.AddScoped<IUserRepository, UserRepository>();\r\nbuilder.Services.AddScoped<IUserService, UserService>();\r\nbuilder.Services.AddScoped<IUnitOfWork, UnitOfWork>();\r\nbuilder.Services.AddScoped<IRoleRepository, RoleRepository>();\r\nbuilder.Services.AddScoped<IRoleService, RoleService>();\r\n\r\n\r\n\r\nbuilder.Services.AddScoped<JWTGenerator, JWTConfig>();\r\n\r\nbuilder.Services.AddScoped(typeof(IRepository<>), typeof(BaseRepository<>));\r\n\r\nbuilder.Services.AddControllers();\r\n// builder.Services.AddAuthentication().AddGoogle(googleOptions =>\r\n// {\r\n//     googleOptions.ClientId = configuration[\"Authentication:Google:ClientId\"];\r\n//     googleOptions.ClientSecret = configuration[\"Authentication:Google:ClientSecret\"];\r\n// });\r\n\r\nbuilder.Services.AddAuthentication(opt =>\r\n{\r\n    opt.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\r\n    opt.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\r\n    opt.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;\r\n}).AddJwtBearer(options =>\r\n{\r\n    options.TokenValidationParameters = new TokenValidationParameters\r\n    {\r\n        ValidIssuer = builder.Configuration[\"JWTSetting:ValidIssuer\"],\r\n        ValidAudience = builder.Configuration[\"JWTSetting:ValidAudience\"],\r\n        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration[\"JWTSetting:SecurityKey\"])),\r\n        ValidateIssuer = true,\r\n        ValidateAudience = true,\r\n        ValidateLifetime = true,\r\n        ValidateIssuerSigningKey = true,\r\n        RequireExpirationTime = true\r\n    };\r\n    options.Events = new JwtBearerEvents\r\n    {\r\n        OnAuthenticationFailed = context =>\r\n        {\r\n            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();\r\n            logger.LogError(\"Authentication failed: {0}\", context.Exception.Message);\r\n            return Task.CompletedTask;\r\n        },\r\n        OnTokenValidated = context =>\r\n        {\r\n            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();\r\n            logger.LogInformation(\"Token validated for user: {0}\", context.Principal.Identity.Name);\r\n            return Task.CompletedTask;\r\n        }\r\n    };\r\n});\r\n\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen(option =>\r\n{\r\n    option.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"GoatEdu API\", Version = \"v1\" });\r\n    option.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme\r\n    {\r\n        In = ParameterLocation.Header,\r\n        Description = \"Please enter a valid token\",\r\n        Name = \"Authorization\",\r\n        Type = SecuritySchemeType.Http,\r\n        BearerFormat = \"JWT\",\r\n        Scheme = \"Bearer\"\r\n    });\r\n    option.AddSecurityRequirement(new OpenApiSecurityRequirement\r\n    {\r\n        {\r\n            new OpenApiSecurityScheme\r\n            {\r\n                Reference = new OpenApiReference\r\n                {\r\n                    Type=ReferenceType.SecurityScheme,\r\n                    Id=\"Bearer\"\r\n                }\r\n            },\r\n            new string[]{}\r\n        }\r\n    });\r\n});\r\n\r\nvar app = builder.Build();\r\n\r\n\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.UseSwagger();\r\n    app.UseSwaggerUI();\r\n}\r\napp.UseCors(builder =>\r\n{\r\n    builder.AllowAnyOrigin()\r\n        .AllowAnyMethod()\r\n        .AllowAnyHeader();\r\n});\r\napp.UseHttpsRedirection();\r\n\r\napp.UseAuthentication(); // Ensure this is before UseAuthorization\r\n\r\napp.UseAuthorization();\r\n\r\napp.MapControllers();\r\n\r\napp.Run();
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.API/Program.cs b/GoatEdu.API/Program.cs
--- a/GoatEdu.API/Program.cs	(revision 57dfe6a4a4e7ffa322b28385b4f5e5ab33e0449f)
+++ b/GoatEdu.API/Program.cs	(date 1716068357210)
@@ -1,4 +1,5 @@
 using System.Text;
+using GoatEdu.API;
 using GoatEdu.Core.Interfaces;
 using GoatEdu.Core.Interfaces.GenericInterfaces;
 using GoatEdu.Core.Interfaces.RoleInterfaces;
@@ -19,18 +20,7 @@
 builder.Services.AddDbContext<GoatEduContext>(options =>
     options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));
 builder.Services.AddCors();
-builder.Services.AddScoped<IUserRepository, UserRepository>();
-builder.Services.AddScoped<IUserService, UserService>();
-builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
-builder.Services.AddScoped<IRoleRepository, RoleRepository>();
-builder.Services.AddScoped<IRoleService, RoleService>();
-
-
-
-builder.Services.AddScoped<JWTGenerator, JWTConfig>();
-
-builder.Services.AddScoped(typeof(IRepository<>), typeof(BaseRepository<>));
-
+builder.Services.AddWebAPIService();
 builder.Services.AddControllers();
 // builder.Services.AddAuthentication().AddGoogle(googleOptions =>
 // {
Index: GoatEdu.Core/QueriesFilter/NotificationQueryFilter.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/QueriesFilter/NotificationQueryFilter.cs b/GoatEdu.Core/QueriesFilter/NotificationQueryFilter.cs
new file mode 100644
--- /dev/null	(date 1716076066248)
+++ b/GoatEdu.Core/QueriesFilter/NotificationQueryFilter.cs	(date 1716076066248)
@@ -0,0 +1,9 @@
+namespace GoatEdu.Core.QueriesFilter;
+
+public class NotificationQueryFilter
+{
+    public Guid Id { get; set; }
+    public string? NotificationName { get; set; }
+    public int PageSize { get; set; }
+    public int PageNumber { get; set; }
+}
\ No newline at end of file
Index: GoatEdu.Infrastructure/Repositories/BaseRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using GoatEdu.Core.Interfaces.GenericInterfaces;\r\nusing Infrastructure.Data;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace Infrastructure.Repositories;\r\n\r\npublic class BaseRepository<T> : IRepository<T> where T : BaseEntity\r\n{\r\n    private readonly GoatEduContext _context;\r\n    protected readonly DbSet<T> _entities;\r\n    public BaseRepository(GoatEduContext context)\r\n    {\r\n        _context = context;\r\n        _entities = context.Set<T>();\r\n    }\r\n\r\n    public T GetById(Guid? id)\r\n    {\r\n        return _entities.Find(id);\r\n    }\r\n\r\n    public void Add(T entity)\r\n    {\r\n        entity.IsDeleted = false;\r\n        _entities.AddAsync(entity);\r\n    }\r\n    \r\n    public IEnumerable<T> GetAll()\r\n    {\r\n        return _entities.Where(x => x.IsDeleted == false).AsEnumerable().ToList();\r\n    }\r\n    public void Update(T entity)\r\n    {\r\n        _entities.Update(entity);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Infrastructure/Repositories/BaseRepository.cs b/GoatEdu.Infrastructure/Repositories/BaseRepository.cs
--- a/GoatEdu.Infrastructure/Repositories/BaseRepository.cs	(revision 57dfe6a4a4e7ffa322b28385b4f5e5ab33e0449f)
+++ b/GoatEdu.Infrastructure/Repositories/BaseRepository.cs	(date 1716075206801)
@@ -14,15 +14,15 @@
         _entities = context.Set<T>();
     }
 
-    public T GetById(Guid? id)
+    public async Task<T?> GetByIdAsync(Guid? id)
     {
-        return _entities.Find(id);
+        return await _entities.FindAsync(id);
     }
 
-    public void Add(T entity)
+    public async Task AddAsync(T entity)
     {
         entity.IsDeleted = false;
-        _entities.AddAsync(entity);
+        await _entities.AddAsync(entity);
     }
     
     public IEnumerable<T> GetAll()
@@ -33,4 +33,9 @@
     {
         _entities.Update(entity);
     }
+
+    public void UpdateRange(List<T> entities)
+    {
+        _entities.UpdateRange(entities);
+    }
 }
Index: GoatEdu.Infrastructure/Mappings/AutoMapperProfile.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using AutoMapper;\r\nusing GoatEdu.Core.DTOs.RoleDto;\r\n\r\nnamespace Infrastructure.Mappings;\r\n\r\npublic class AutoMapperProfile : Profile\r\n{\r\n    public AutoMapperProfile()\r\n    {\r\n        CreateMap<Role, RoleResponseDto>();\r\n        CreateMap<RoleResponseDto, Role>();\r\n\r\n      \r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Infrastructure/Mappings/AutoMapperProfile.cs b/GoatEdu.Infrastructure/Mappings/AutoMapperProfile.cs
--- a/GoatEdu.Infrastructure/Mappings/AutoMapperProfile.cs	(revision 57dfe6a4a4e7ffa322b28385b4f5e5ab33e0449f)
+++ b/GoatEdu.Infrastructure/Mappings/AutoMapperProfile.cs	(date 1716068659819)
@@ -7,9 +7,8 @@
 {
     public AutoMapperProfile()
     {
-        CreateMap<Role, RoleResponseDto>();
-        CreateMap<RoleResponseDto, Role>();
-
+        CreateMap<Role, RoleResponseDto>().ReverseMap();
+    
       
     }
 }
\ No newline at end of file
Index: GoatEdu.Infrastructure/Repositories/UnitOfWork.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using GoatEdu.Core.Interfaces;\r\nusing GoatEdu.Core.Interfaces.RoleInterfaces;\r\nusing GoatEdu.Core.Interfaces.UserInterfaces;\r\nusing Infrastructure.Data;\r\nnamespace Infrastructure.Repositories;\r\n\r\npublic class UnitOfWork : IUnitOfWork\r\n{\r\n    private readonly GoatEduContext _context;\r\n    \r\n    //add interface of repo\r\n    private readonly IUserRepository _userRepository;\r\n    private readonly IRoleRepository _roleRepository;\r\n\r\n    public UnitOfWork(GoatEduContext context)\r\n    {\r\n        _context = context;\r\n    }\r\n    \r\n    //add interface of repo\r\n    public IUserRepository UserRepository => _userRepository ?? new UserRepository(_context);\r\n    public IRoleRepository RoleRepository => _roleRepository ?? new RoleRepository(_context);\r\n\r\n    public void SaveChanges()\r\n    {\r\n        _context.SaveChanges();\r\n    }\r\n\r\n    public async Task SaveChangesAsync()\r\n    {\r\n        await _context.SaveChangesAsync();\r\n    }\r\n    \r\n    public void Dispose()\r\n    {\r\n        if (_context != null)\r\n        {\r\n            _context.Dispose();\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Infrastructure/Repositories/UnitOfWork.cs b/GoatEdu.Infrastructure/Repositories/UnitOfWork.cs
--- a/GoatEdu.Infrastructure/Repositories/UnitOfWork.cs	(revision 57dfe6a4a4e7ffa322b28385b4f5e5ab33e0449f)
+++ b/GoatEdu.Infrastructure/Repositories/UnitOfWork.cs	(date 1716075392380)
@@ -1,4 +1,5 @@
 using GoatEdu.Core.Interfaces;
+using GoatEdu.Core.Interfaces.NotificationInterfaces;
 using GoatEdu.Core.Interfaces.RoleInterfaces;
 using GoatEdu.Core.Interfaces.UserInterfaces;
 using Infrastructure.Data;
@@ -11,6 +12,7 @@
     //add interface of repo
     private readonly IUserRepository _userRepository;
     private readonly IRoleRepository _roleRepository;
+    private readonly INotificationRepository _notificationRepository;
 
     public UnitOfWork(GoatEduContext context)
     {
@@ -20,15 +22,16 @@
     //add interface of repo
     public IUserRepository UserRepository => _userRepository ?? new UserRepository(_context);
     public IRoleRepository RoleRepository => _roleRepository ?? new RoleRepository(_context);
+    public INotificationRepository NotificationRepository => _notificationRepository;
 
     public void SaveChanges()
     {
         _context.SaveChanges();
     }
 
-    public async Task SaveChangesAsync()
+    public async Task<int> SaveChangesAsync()
     {
-        await _context.SaveChangesAsync();
+        return await _context.SaveChangesAsync();
     }
     
     public void Dispose()
Index: GoatEdu.Core/GoatEdu.Core.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>net6.0</TargetFramework>\r\n        <ImplicitUsings>enable</ImplicitUsings>\r\n        <Nullable>enable</Nullable>\r\n    </PropertyGroup>\r\n    \r\n\r\n    <ItemGroup>\r\n      <Folder Include=\"DTOs\\SubjectDto\\\" />\r\n      <Folder Include=\"DTOs\\UserDto\\\" />\r\n      <Folder Include=\"QueriesFilter\\\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup>\r\n      <PackageReference Include=\"AutoMapper\" Version=\"13.0.1\" />\r\n      <PackageReference Include=\"BCrypt.Net-Next\" Version=\"4.0.3\" />\r\n      <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"6.0.29\" />\r\n      <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"6.0.29\" />\r\n      <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"6.0.29\" />\r\n      <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL.Design\" Version=\"1.1.0\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GoatEdu.Core/GoatEdu.Core.csproj b/GoatEdu.Core/GoatEdu.Core.csproj
--- a/GoatEdu.Core/GoatEdu.Core.csproj	(revision 57dfe6a4a4e7ffa322b28385b4f5e5ab33e0449f)
+++ b/GoatEdu.Core/GoatEdu.Core.csproj	(date 1716075879591)
@@ -10,7 +10,6 @@
     <ItemGroup>
       <Folder Include="DTOs\SubjectDto\" />
       <Folder Include="DTOs\UserDto\" />
-      <Folder Include="QueriesFilter\" />
     </ItemGroup>
 
     <ItemGroup>
